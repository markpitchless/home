#!/bin/bash

set -euo pipefail

: ${NFA:=~/.nfa}

user="$USER"
bakdate="$(date +%Y%m%dT%H%M%S)"
dry=false

nfa-info() {
    echo nfa: "$*"
}

dry(){
    if [ "$dry" = true ]; then
        nfa-info DRY: "$@"
    else
        $@
    fi
}

nfa-bak-file(){
    f=$1
    [ -e "$f" ] && dry cp "$f" "$f.nfa$bakdate"
}

nfa-link(){
    f="$1"
    target="$2"

    if [ -L "$target" ]; then
      nfa-info Already linked: $target
      return
    fi
    [ -e "$target" ] && dry mv "$target" "$target.nfa$bakdate"
    dry ln -s "$f" "$target"
    nfa-info Linked "$f" to "$target"
}

nfa-append-once(){
    line="$1"
    target="$2"

    if [ ! -f "$target" ]; then
        nfa-info Nothing to infect, "$target" not found
    elif grep -q '^#nfa: infected' "$target"; then
        nfa-info Already infected "$target"
    else
        nfa-bak-file "$target"
        if [[ ! $dry == true ]]; then
            # XXX: can't use dry here because of the redirection
            echo "#nfa: infected" >> "$target"
            echo "$line" >> "$target"
        fi
        nfa-info Infected "$target"
    fi
}

# TODO: create missing files
nfa-infect-profiles() {
    nfa-append-once "source $NFA/profile" "$HOME/.profile"
    nfa-append-once "source $NFA/bashrc" "$HOME/.bashrc"
    nfa-append-once "source $NFA/bash_profile" "$HOME/.bash_profile"
    nfa-append-once "source $NFA/bash_logout" "$HOME/.bash_logout"
}

# Link anything in `$NFA/home/` to the same name in `$HOME`.
# You put your dot files in `$NFA/home/`.
# TODO: Infect with  symlink but after the move, move all the existing
# contents of the dir back in. So we don't loose all the .config by symlinking
# it.
# TODO: how to handle the nesting?
nfa-infect-home() {
    for f1 in `find "$NFA"/home/ -mindepth 1 -maxdepth 1`; do
        nfa-link "$f1" "$HOME"/$(basename "$f1")
    done
}

nfa-infect-profiles
nfa-infect-home
